openapi: 3.0.3
info:
  title: Zapchaztiulka project
  description: |-
    Back-end for car spare parts store Zapchaztiulka by Swagger OpenAPI 3.0
  version: 1.0.0
servers:
  - url: https://
    description: web server
  - url: http://localhost:5000/api
    description: local server
tags:
  - name: user
    description: register, login, logout, role and others operations with User
#   - name: review
#     description: Add, delete nad get reviews
#   - name: task
#     description: Add, delete nad get tasks

# paths:
#   /users/register:
#     post:
#       tags:
#         - user
#       summary: Register a new user
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 email:
#                   type: string
#                   example: example@mail.uk.com
#                 username:
#                   type: string
#                   example: Selena
#                 password:
#                   type: string
#                   format: password
#                   example: Ro134908
#               required:
#                 - email
#                 - username
#                 - password
#       responses:
#         '201':
#           description: User registered successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       id:
#                         type: string
#                         description: user ID from Mongo DB
#                       email:
#                         type: string
#                       username:
#                         type: string
#         '409':
#           description: 'Email has already registered'

#   /users/login:
#     post:
#       tags:
#         - user
#       summary: Login user
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 email:
#                   type: string
#                   example: example@mail.uk.com
#                 password:
#                   type: string
#                   example: Ro134908
#               required:
#                 - email
#                 - password
#       responses:
#         '200':
#           description: User registered successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       avatarURL:
#                         type: string
#                         example: ""
#                       email:
#                         type: string
#                       username:
#                         type: string
#                       birthday:
#                         type: string
#                         example: null
#                       phone:
#                         type: string
#                         example: ""
#                       skype:
#                         type: string
#                         example: ""
#                       token:
#                         type: string
#                         example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0N2EyYWVkNzJlZmI3M2I5MzM0ZDNkMiIsImlhdCI6MTY4NTcyODA3NiwiZXhwIjoxNjg2NTkyMDc2fQ.wMinCoY8gM4Pgu7tCR0lQ557SEubm58K7XYtsNa9tc8
#         '404':
#           description:
#             'User is not found. Please check email'
#         '403':
#           description:
#             'Email is not verified yet. Check email box for verification'
#         '401':
#           description:
#             'Password is incorrect. Please check'

#   /users/logout:
#     post:
#       tags:
#         - user
#       summary: Logout user
#       responses:
#         '204':
#           description: successful operation
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: 'User is unauthorized'
#       security:
#         - BearerAuth: []

#   /users/current:
#     get:
#       tags:
#         - user
#       summary: Get user by token
#       responses:
#         '200':
#           description: User was gotten successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       id:
#                         type: string
#                         example: "647a2aed72efb73b9334d3d2"
#                       avatarURL:
#                         type: string
#                         example: "http://my-avatar.com/23456"
#                       email:
#                         type: string
#                       username:
#                         type: string
#                       birthday:
#                         type: string
#                         example: 1977-06-10T00:00:00.000Z
#                       phone:
#                         type: string
#                         example: "38 (067) 111 17 11"
#                       skype:
#                         type: string
#                         example: "(067) 111 17 11"
#                       token:
#                         type: string
#                         example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0N2EyYWVkNzJlZmI3M2I5MzM0ZDNkMiIsImlhdCI6MTY4NTcyODA3NiwiZXhwIjoxNjg2NTkyMDc2fQ.wMinCoY8gM4Pgu7tCR0lQ557SEubm58K7XYtsNa9tc8
#         '400':
#           description: Not found
#       security:
#         - BearerAuth: []

#   /users/{id}:
#     get:
#       tags:
#         - user
#       summary: Get user by ID
#       responses:
#         '200':
#           description: User was gotten successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       avatarURL:
#                         type: string
#                         example: "http://my-avatar.com/23456"
#                       email:
#                         type: string
#                       username:
#                         type: string
#                       birthday:
#                         type: string
#                         example: 1977-06-10T00:00:00.000Z
#                       phone:
#                         type: string
#                         example: "38 (067) 111 17 11"
#                       skype:
#                         type: string
#                         example: "(067) 111 17 11"
#         '400':
#           description: Not found

#   /users/update/:
#     patch:
#       tags:
#         - user
#       summary: Update user
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/UserUpdate'
#       responses:
#         '200':
#           description: User was gotten successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       avatarURL:
#                         type: string
#                         example: "https://res.cloudinary.com/dfxe5fcku/image/upload/v1685951126/avatar.jpg"
#                       email:
#                         type: string
#                       username:
#                         type: string
#                       birthday:
#                         type: string
#                         example: 1977-06-10T00:00:00.000Z
#                       phone:
#                         type: string
#                         example: "38 (067) 111 17 11"
#                       skype:
#                         type: string
#                         example: "(067) 111 17 11"
#                   message:
#                     type: string
#                     example: "User with ID: 647a2aed72efb73b9334d3d2 updated"
#       security:
#         - BearerAuth: []

#   /users/getNewPassword/:
#     patch:
#       tags:
#         - user
#       summary: Send new user password to email
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 email:
#                   type: string
#                   example: example@mail.uk.com
#               required:
#                 - email
#       responses:
#         '201':
#           description: User got new password to email
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: 'New password has been created for user: example@mail.uk.com'
#         '404':
#           description: Not found
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: 'User is not found. Please check email'

#   /users/createNewPassword/:
#     patch:
#       tags:
#         - user
#       summary: Change user password and send new one to email
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 password1:
#                   type: string
#                   example: Ro134908
#                 password2:
#                   type: string
#                   example: Ro134908
#               required:
#                 - password1
#                 - password2
#       responses:
#         '201':
#           description: User changed his password
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: 'Password has been successfully changed'
#         '401':
#           description: Different passwords were typed
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: 'Password is not the same, please re-enter'
#         '404':
#           description: Not found
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: 'User is not found. Please check email'

#   /users/google:
#     get:
#       tags:
#         - user
#       summary: Authenticate with Google
#       responses:
#         '200':
#           description: Redirect to Google for authentication
#     get:
#       tags:
#         - user
#       summary: Google Auth Callback
#       parameters:
#         - in: query
#           name: code
#           required: true
#           schema:
#             type: string
#         - in: query
#           name: state
#           required: true
#           schema:
#             type: string
#       responses:
#         '302':
#           description: Redirect to success or failure URL

#   /users/google/callback:
#     post:
#       tags:
#         - user
#       summary: Successful Google Auth Callback
#       responses:
#           '200':
#             description: User login successfully
#             content:
#               application/json:
#                 schema:
#                   type: object
#                   properties:
#                     data:
#                       type: object
#                       properties:
#                         avatarURL:
#                           type: string
#                           description: URL of the user's avatar
#                         username:
#                           type: string
#                           description: User's username
#                         email:
#                           type: string
#                           description: User email address
#                         birthday:
#                           type: string
#                           format: date
#                           description: User's birthday
#                         phone:
#                           type: string
#                           description: User's phone number
#                         skype:
#                           type: string
#                           description: User's Skype ID
#                         token:
#                           type: string
#                           description: User's token
#                     message:
#                       type: string
#                       description: Success message
#                       example: example@mail.uk.com has been logged in through Google Auth
#                     redirectURL:
#                       type: string
#                       description: URL for redirecting the user
#                       example: 'https://oleh-kliapko.github.io/GooseTrack_front/login?token=${token}'

#   /users/verify:
#     post:
#       tags:
#         - user
#       summary: Send Verification Email
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 email:
#                   type: string
#                   format: email
#                   description: User email address
#               required:
#                 - email
#       responses:
#         '302':
#           description: Redirect to login page
#         '400':
#           description: Verification has already been passed
#         '404':
#           description: User not found

#   # ===================================================================================================
#   /reviews:
#     get:
#       tags:
#         - review
#       summary: Get all reviews
#       parameters:
#         - name: page
#           in: query
#           description: Page number for pagination (default: 1)
#           schema:
#             type: integer
#             minimum: 1
#             default: 1
#         - name: limit
#           in: query
#           description: Number of reviews per page (default: 10)
#           schema:
#             type: integer
#             minimum: 1
#             default: 10
#       responses:
#         '200':
#           description: Reviews fetched successfully
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/GetAllReviewsResponse'

#     post:
#       tags:
#         - review
#       summary: Add a new review
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 stars:
#                   type: number
#                   enum: [1, 2, 3, 4, 5]
#                 comment:
#                   type: string
#                   minLength: 6
#                   maxLength: 300
#               required:
#                 - stars
#                 - comment
#       responses:
#         '201':
#           description: Review added successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       stars:
#                         type: number
#                         description: Rating in stars (1 to 5)
#                       comment:
#                         type: string
#                         description: Review comment
#                       owner:
#                         type: string
#                         description: ID of the reviewer (user)
#                       username:
#                         type: string
#                         description: name of the reviewer (user)
#                       avatarURL:
#                         type: string
#                         description: URL of user avatar that saved in Cloudinary
#                       createdAt:
#                         type: string
#                         format: date-time
#                         description: Time of comment creating
#         '400':
#           description: Invalid request payload
#       security:
#         - BearerAuth: []

#   /reviews/own:
#     get:
#       tags:
#         - review
#       summary: Get all reviews of current user
#       parameters:
#         - name: page
#           in: query
#           description: Page number for pagination (default: 1)
#           schema:
#             type: integer
#             minimum: 1
#             default: 1
#         - name: limit
#           in: query
#           description: Number of reviews per page (default: 10)
#           schema:
#             type: integer
#             minimum: 1
#             default: 10
#       responses:
#         '200':
#           description: Reviews fetched successfully
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/GetAllReviewsResponse'
#       security:
#         - BearerAuth: []

#   /reviews/own/{id}:
#     patch:
#       tags:
#         - review
#       summary: Update a review by ID
#       parameters:
#         - name: id
#           in: path
#           description: ID of the review to update
#           required: true
#           schema:
#             type: string
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 stars:
#                   type: number
#                   enum: [1, 2, 3, 4, 5]
#                 comment:
#                   type: string
#                   minLength: 6
#                   maxLength: 300
#       responses:
#         '200':
#           description: Review updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       stars:
#                         type: number
#                         description: Rating in stars (1 to 5)
#                       comment:
#                         type: string
#                         description: Review comment
#                       owner:
#                         type: string
#                         description: ID of the reviewer (user)
#                       username:
#                         type: string
#                         description: name of the reviewer (user)
#                       avatarURL:
#                         type: string
#                         description: URL of user avatar that saved in Cloudinary
#                       createdAt:
#                         type: string
#                         format: date-time
#                         description: Time of comment creating
#       security:
#         - BearerAuth: []

#     delete:
#       tags:
#         - review
#       summary: Delete a review by ID
#       parameters:
#         - name: id
#           in: path
#           description: ID of the review to delete
#           required: true
#           schema:
#             type: string
#       responses:
#         '200':
#           description: Review was deleted successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: "Review by ID:647b12d0a4286b7e663ecfea was deleted"
#         '404':
#           description: Review not found
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: "Review not found"
#       security:
#         - BearerAuth: []

#   # ===================================================================================================
#   /tasks:
#     get:
#       tags:
#         - task
#       summary: Get all tasks
#       parameters:
#         - name: month
#           in: query
#           description: number of month (optional)
#           required: false
#           schema:
#             type: string
#       responses:
#         '200':
#           description: Successful response
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       tasksCurrentMonth:
#                         type: array
#                         items:
#                           $ref: '#/components/schemas/GetTask'
#                       allTasks:
#                         type: array
#                         items:
#                           $ref: '#/components/schemas/GetTask'
#                       boards:
#                         type: array
#                         items:
#                           type: object
#                           properties:
#                             category:
#                               type: string
#                               enum:
#                                 - to-do
#                                 - in-progress
#                                 - done
#                             owner:
#                               type: string
#                             tasks:
#                               type: array
#                               items:
#                                 $ref: '#/components/schemas/GetBoard'
#       security:
#         - BearerAuth: []

#     post:
#       tags:
#         - task
#       summary: Add a new task
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 title:
#                   type: string
#                 start:
#                   type: string
#                   example: 09:30
#                 end:
#                   type: string
#                   example: 10:30
#                 priority:
#                   type: string
#                   enum:
#                     - high
#                     - medium
#                     - low
#                 date:
#                   type: string
#                   pattern: "2023-06-05"
#                 category:
#                   type: string
#                   enum:
#                     - to-do
#                     - in-progress
#                     - completed
#       responses:
#         '201':
#           description: Task created successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       id:
#                         type: string
#                       title:
#                         type: string
#                       start:
#                         type: string
#                       end:
#                         type: string
#                       priority:
#                         type: string
#                       date:
#                         type: string
#                       category:
#                         type: string
#                       owner:
#                         type: string
#                       createdAt:
#                         type: string
#                         example: 2023-06-05T10:05:11.538Z
#       security:
#         - BearerAuth: []

#   /tasks/{id}:
#     patch:
#       tags:
#         - task
#       summary: Update a tasks by ID
#       parameters:
#         - name: id
#           in: path
#           description: ID of the tasks to update
#           required: true
#           schema:
#             type: string
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 title:
#                   type: string
#                 start:
#                   type: string
#                   example: 09:30
#                 end:
#                   type: string
#                   example: 10:30
#                 priority:
#                   type: string
#                   enum:
#                     - high
#                     - medium
#                     - low
#                 date:
#                   type: string
#                   pattern: "2023-06-05"
#                 category:
#                   type: string
#                   enum:
#                     - to-do
#                     - in-progress
#                     - completed
#       responses:
#         '200':
#           description: Task was updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   data:
#                     type: object
#                     properties:
#                       id:
#                         type: string
#                       title:
#                         type: string
#                       start:
#                         type: string
#                       end:
#                         type: string
#                       priority:
#                         type: string
#                       date:
#                         type: string
#                       category:
#                         type: string
#                       owner:
#                         type: string
#                       createdAt:
#                         type: string
#                         example: 2023-06-05T10:05:11.538Z
#         '404':
#           description: Task not found
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: "Task not found"
#       security:
#         - BearerAuth: []

#     delete:
#       tags:
#         - task
#       summary: Delete a task by ID
#       parameters:
#         - name: id
#           in: path
#           description: ID of the task to delete
#           required: true
#           schema:
#             type: string
#       responses:
#         '200':
#           description: Task was deleted successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: "Task by ID:647b12d0a4286b7e663ecfea was deleted"
#         '404':
#           description: Task not found
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: "Task not found"
#       security:
#         - BearerAuth: []

#   # ===================================================================================================
# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         avatarURL:
#           type: string
#           pattern: <urlPattern>
#           description: URL of the user's avatar
#         email:
#           type: string
#           description: User email address with at least 2 domain segments
#         username:
#           type: string
#           description: User's username - only Latin or Cyrillic characters
#         password:
#           type: string
#           description: User password - no less than 6 characters, at least one upperCase and one lowercase
#           example: Ro1478
#         birthday:
#           type: string
#           format: date
#           description: User's birthday
#         phone:
#           type: string
#           example: 38 (067) 409 90 67
#           description: User's phone number - pattern /^38 \(\d{3}\) \d{3} \d{2} \d{2}$/;
#         skype:
#           type: string
#           description: User's Skype ID
#         token:
#           type: string
#           description: User's token
#         verify:
#           type: boolean
#           description: Indicates if the user is verified
#         verificationToken:
#           type: string
#           description: User's verification token
#       required:
#         - email
#         - username
#         - password

#     Review:
#       type: object
#       properties:
#         stars:
#           type: integer
#           enum: [1, 2, 3, 4, 5]
#           description: Rating in stars (1 to 5)
#         comment:
#           type: string
#           minLength: 6
#           maxLength: 300
#           description: Review comment
#         owner:
#           type: string
#           description: ID of the reviewer (user)
#         username:
#           type: string
#           description: name of the reviewer (user)
#         avatarURL:
#           type: string
#           description: URL of user avatar that saved in Cloudinary
#       required:
#         - stars
#         - comment

#     Task:
#       type: object
#       properties:
#         id:
#           type: string
#         title:
#           type: string
#           maxLength: 250
#         start:
#           type: string
#           pattern: '^\d{2}:\d{2}$'
#         end:
#           type: string
#           pattern: '^\d{2}:\d{2}$'
#         priority:
#           type: string
#           enum:
#             - high
#             - medium
#             - low
#         date:
#           type: string
#           pattern: '^\d{4}-\d{2}-\d{2}$'
#         category:
#           type: string
#           enum:
#             - to-do
#             - in-progress
#             - completed
#         owner:
#           type: string

#     UserUpdate:
#       type: object
#       properties:
#         avatarURL:
#           type: string
#           pattern: <file in format jpg/jpeg/png>
#           description: File in formats JPG, JPEG, PNG of the user's avatar
#         email:
#           type: string
#           description: User email address with at least 2 domain segments
#         username:
#           type: string
#           description: User's username - only Latin or Cyrillic characters
#         password:
#           type: string
#           description: User password - no less than 6 characters, at least one upperCase and one lowercase
#           example: Ro1478
#         birthday:
#           type: string
#           format: date
#           description: User's birthday
#         phone:
#           type: string
#           example: 38 (067) 409 90 67
#           description: User's phone number - pattern /^38 \(\d{3}\) \d{3} \d{2} \d{2}$/;
#         skype:
#           type: string
#           description: User's Skype ID
#       required:
#         - email
#         - username
#     GetAllReviewsResponse:
#       type: object
#       properties:
#         data:
#           type: object
#           properties:
#             reviews:
#               type: array
#               items:
#                 type: object
#                 properties:
#                   stars:
#                     type: integer
#                     example: 4
#                   comment:
#                     type: string
#                     example: GooseTrack is impressive, the calendar view and filter options make it easy to stay organized and focused. Highly recommended
#                   owner:
#                     type: string
#                     example: 647a2aed72efb73b9334d3d2
#                   username:
#                     type: string
#                     example: Selena
#                   avatarURL:
#                     type: string
#                     example: https://res.cloudinary.com/dfxe5fcku/image/upload/v1686240479/nbsmx7q1zobroeuozef7.jpg
#                   createdAt:
#                     type: string
#                     example: 2023-06-03T06:21:30.884Z
#     GetTask:
#       type: object
#       properties:
#         _id:
#           type: string
#         title:
#           type: string
#         start:
#           type: string
#         end:
#           type: string
#         priority:
#           type: string
#         date:
#           type: string
#           format: date-time
#         category:
#           type: string
#         owner:
#           type: string
#         createdAt:
#           type: string
#           format: date-time
#     GetBoard:
#       type: object
#       properties:
#         _id:
#           type: string
#         title:
#           type: string
#         start:
#           type: string
#         end:
#           type: string
#         priority:
#           type: string
#         date:
#           type: string
#           format: date-time
